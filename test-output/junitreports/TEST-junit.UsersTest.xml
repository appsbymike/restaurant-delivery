<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite skipped="270" hostname="DESKTOP-DH4500R" name="junit.UsersTest" tests="324" failures="0" timestamp="21 Dec 2017 19:06:59 GMT" time="223.061" errors="0">
  <testcase name="loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.788" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.821" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.575" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.252" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.651" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.380" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.537" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.336" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.978" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="0.407" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.199" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="0.787" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.820" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.307" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.382" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.088" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.947" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.817" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.690" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.603" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.087" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="0.836" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.686" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="1.116" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.946" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="1.477" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.981" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.200" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.064" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.608" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="0.786" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="0.509" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="1.146" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.146" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.691" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="1.114" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.121" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.175" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="0.913" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.886" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.641" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.007" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="1.478" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.383" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.222" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="0.509" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.239" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="1.080" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.223" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="0.507" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.754" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.640" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.251" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="1.076" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.174" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.602" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.725" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.691" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.785" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.724" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.885" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="0.430" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="0.431" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.251" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="0.481" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="1.078" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.596" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="1.478" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.596" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="1.144" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.175" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.331" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.947" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.279" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="0.786" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.642" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.353" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.030" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.945" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.026" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.649" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="1.117" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.331" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="0.457" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="0.479" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.646" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.118" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.640" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="1.013" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.091" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.914" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.306" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="0.482" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.567" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.380" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.887" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="0.455" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="1.171" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.066" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.574" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="0.740" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="0.430" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.852" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.595" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="1.430" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.884" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="1.010" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.242" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="1.010" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.886" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.610" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.241" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.913" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.757" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.225" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.818" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.379" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="0.456" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.030" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.595" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.740" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="1.114" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.305" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.287" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.595" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.198" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="1.147" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="1.430" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="0.407" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="1.014" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="1.046" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="0.479" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.379" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="0.788" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="0.835" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.949" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.088" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.609" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.643" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.355" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.176" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.532" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.241" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.819" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.252" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.383" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.759" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.723" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="0.531" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.289" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="0.837" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.289" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.335" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="1.429" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.090" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.976" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.337" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.118" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.031" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.534" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="0.454" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.689" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.334" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="0.456" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="0.508" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.064" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.280" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.240" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.690" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="0.454" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="0.508" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.817" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.645" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.850" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="1.479" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.758" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.849" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.031" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="0.739" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.739" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="1.526" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.278" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.145" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.355" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="0.480" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="1.479" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.738" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.148" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.690" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="1.118" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.979" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="0.837" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.381" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.147" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.251" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="1.528" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="1.432" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.037" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.683" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="1.043" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.755" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.089" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="0.432" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="0.457" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.288" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.199" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.306" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.332" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="0.407" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.174" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.306" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.378" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="1.042" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="1.432" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.977" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.539" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="1.011" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.120" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="1.041" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.788" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.088" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="1.113" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="1.146" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.065" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="0.455" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.199" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.063" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.147" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.032" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="0.916" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="1.074" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="1.076" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.305" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="1.047" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.888" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.279" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.789" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="1.073" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.609" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="1.478" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="0.507" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="0.836" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="1.144" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.280" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.756" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.240" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.689" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="1.081" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="0.455" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.199" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="0.432" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.641" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.224" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.531" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="1.526" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,]" time="0.089" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="0.408" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="0.787" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="0.531" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.597" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="1.431" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.335" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.382" classname="junit.UsersTest"/>
  <testcase name="loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.851" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="1.079" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.224" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.354" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000]" time="0.480" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] -->
  <testcase name="invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.288" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.145" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.722" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.570" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.119" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.541" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="1.171" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.279" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.224" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.739" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,]" time="0.975" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="1.075" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.529" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2]" time="0.835" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="1.012" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="1.384" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.356" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,]" time="1.075" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="1.384" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,]" time="0.252" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.287" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.354" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.786" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.065" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3]" time="0.457" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] -->
  <testcase name="invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.119" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.642" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.726" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="0.431" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2]" time="0.786" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,]" time="0.535" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] -->
  <testcase name="updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc]" time="1.146" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="0.915" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.336" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,]" time="0.946" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.612" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.612" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.687" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,]" time="0.787" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="0.917" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,]" time="0.848" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.173" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.568" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.684" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.685" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,]" time="0.721" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,]" time="0.176" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,]" time="0.854" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,]" time="1.044" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] -->
  <testcase name="createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="0.641" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2]" time="1.172" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] -->
  <testcase name="createUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,]" time="0.913" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="0.408" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,]" time="0.573" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2]" time="1.527" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,]" time="0.407" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] -->
</testsuite> <!-- junit.UsersTest -->
