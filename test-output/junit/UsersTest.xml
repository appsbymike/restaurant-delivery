<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="DESKTOP-DH4500R" ignored="0" name="UsersTest" tests="398" failures="0" timestamp="21 Dec 2017 19:06:59 GMT" time="3.483" errors="0">
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.026" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on registerQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.529" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.531" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.535" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.537" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.539" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.541" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on registerQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.567" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.568" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.57" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.573" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.574" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.575" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on registerQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.602" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.603" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.608" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.609" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.609" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.61" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.612" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.612" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.64" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.641" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.645" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.646" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.649" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.651" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.683" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.684" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.685" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.686" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.687" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.69" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.721" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.722" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.723" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.724" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.725" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.726" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.754" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.755" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.756" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.757" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.758" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.759" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.785" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.786" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.787" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.788" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.788" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.789" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.817" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.817" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.818" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.819" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.82" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.821" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.848" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.849" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.85" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.851" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.852" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.854" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.884" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.885" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.886" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.886" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.887" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.888" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on createUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.913" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.913" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.914" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.945" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.946" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.947" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.946" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.947" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.949" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.975" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.976" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.977" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.978" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.979" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.981" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="1.01" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="1.01" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="1.011" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="1.012" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="1.013" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="1.014" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="1.041" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="1.042" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="1.043" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="1.044" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="1.046" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="1.047" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="1.073" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="1.074" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="1.075" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="1.075" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="1.076" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="1.076" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="1.078" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="1.079" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="1.08" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="1.081" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on getDetailsTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="1.113" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="1.114" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="1.114" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="1.116" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="1.117" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="1.118" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on getDetailsTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="1.144" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="1.144" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="1.146" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="1.146" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="1.146" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="1.147" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on getDetailsTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="1.171" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="1.171" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.172" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.173" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.239" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.24" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.24" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.241" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.241" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.242" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.287" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.287" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.288" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.288" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.289" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.289" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.334" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.335" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.335" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.336" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.336" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.337" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.382" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.382" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.383" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.383" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.384" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.384" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.429" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.43" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.43" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="1.431" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="1.432" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="1.432" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="1.477" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="1.478" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="1.478" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="1.479" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="1.478" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="1.479" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on updateUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="1.526" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="1.526" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="1.527" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="1.528" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="test[CASE0 - Valid info | Expected: true | Parameters: 1234567890,123,12345] on test[CASE0 - Valid info | Expected: true | Parameters: 1234567890,123,12345](junit.OrderModule)" time="1.58" classname="junit.OrderModule"/>
  <testcase name="test[CASE1 - Invalid cc number (letters) | Expected: false | Parameters: a234567890,123,12345] on test[CASE1 - Invalid cc number (letters) | Expected: false | Parameters: a234567890,123,12345](junit.OrderModule)" time="1.604" classname="junit.OrderModule"/>
  <testcase name="test[CASE2 - Invalid cc number (special characters) | Expected: false | Parameters: 123$56.890,123,12345] on test[CASE2 - Invalid cc number (special characters) | Expected: false | Parameters: 123$56.890,123,12345](junit.OrderModule)" time="1.626" classname="junit.OrderModule"/>
  <testcase name="test[CASE3 - Invalid sec number (letters) | Expected: false | Parameters: 1234567890,a23,12345] on test[CASE3 - Invalid sec number (letters) | Expected: false | Parameters: 1234567890,a23,12345](junit.OrderModule)" time="1.648" classname="junit.OrderModule"/>
  <testcase name="test[CASE4 - Invalid sec number (special characters) | Expected: false | Parameters: 1234567890,!23,12345] on test[CASE4 - Invalid sec number (special characters) | Expected: false | Parameters: 1234567890,!23,12345](junit.OrderModule)" time="1.673" classname="junit.OrderModule"/>
  <testcase name="test[CASE5 - Invalid zipcode (letters) | Expected: false | Parameters: 1234567890,123,123d5] on test[CASE5 - Invalid zipcode (letters) | Expected: false | Parameters: 1234567890,123,123d5](junit.OrderModule)" time="1.695" classname="junit.OrderModule"/>
  <testcase name="test[CASE6 - Invalid zipcode (special characters) | Expected: false | Parameters: 1234567890,123,!@.45] on test[CASE6 - Invalid zipcode (special characters) | Expected: false | Parameters: 1234567890,123,!@.45](junit.OrderModule)" time="1.718" classname="junit.OrderModule"/>
  <testcase name="test[CASE0 - Valid info | Expected: true | Parameters: 1234567890,123,12345] on test[CASE0 - Valid info | Expected: true | Parameters: 1234567890,123,12345](junit.OrderModule)" time="0.048" classname="junit.OrderModule"/>
  <testcase name="test[CASE1 - Invalid cc number (letters) | Expected: false | Parameters: a234567890,123,12345] on test[CASE1 - Invalid cc number (letters) | Expected: false | Parameters: a234567890,123,12345](junit.OrderModule)" time="0.102" classname="junit.OrderModule"/>
  <testcase name="test[CASE2 - Invalid cc number (special characters) | Expected: false | Parameters: 123$56.890,123,12345] on test[CASE2 - Invalid cc number (special characters) | Expected: false | Parameters: 123$56.890,123,12345](junit.OrderModule)" time="0.126" classname="junit.OrderModule"/>
  <testcase name="test[CASE3 - Invalid sec number (letters) | Expected: false | Parameters: 1234567890,a23,12345] on test[CASE3 - Invalid sec number (letters) | Expected: false | Parameters: 1234567890,a23,12345](junit.OrderModule)" time="0.148" classname="junit.OrderModule"/>
  <testcase name="test[CASE4 - Invalid sec number (special characters) | Expected: false | Parameters: 1234567890,!23,12345] on test[CASE4 - Invalid sec number (special characters) | Expected: false | Parameters: 1234567890,!23,12345](junit.OrderModule)" time="0.17" classname="junit.OrderModule"/>
  <testcase name="test[CASE5 - Invalid zipcode (letters) | Expected: false | Parameters: 1234567890,123,123d5] on test[CASE5 - Invalid zipcode (letters) | Expected: false | Parameters: 1234567890,123,123d5](junit.OrderModule)" time="0.192" classname="junit.OrderModule"/>
  <testcase name="test[CASE6 - Invalid zipcode (special characters) | Expected: false | Parameters: 1234567890,123,!@.45] on test[CASE6 - Invalid zipcode (special characters) | Expected: false | Parameters: 1234567890,123,!@.45](junit.OrderModule)" time="0.216" classname="junit.OrderModule"/>
  <testcase name="GETREVIEW[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,] on GETREVIEW[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule)" time="0.004" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,] on GETREVIEW[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,] on SUBMITREVIEW[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule)" time="0.005" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,] on SUBMITREVIEW[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,] on GETITEM[CASE0 - Getting Item; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule)" time="0.028" classname="junit.ReviewsModule"/>
  <testcase name="GETREVIEW[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,] on GETREVIEW[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule)" time="0.028" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,] on GETREVIEW[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,] on SUBMITREVIEW[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule)" time="0.029" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,] on SUBMITREVIEW[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,] on GETITEM[CASE1 - Getting Item; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule)" time="0.052" classname="junit.ReviewsModule"/>
  <testcase name="GETREVIEW[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on GETREVIEW[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule)" time="0.052" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on GETREVIEW[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on SUBMITREVIEW[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule)" time="0.053" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on SUBMITREVIEW[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on GETITEM[CASE2 - Getting Item; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule)" time="0.075" classname="junit.ReviewsModule"/>
  <testcase name="GETREVIEW[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,] on GETREVIEW[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule)" time="0.076" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,] on GETREVIEW[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,] on SUBMITREVIEW[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule)" time="0.076" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,] on SUBMITREVIEW[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,] on GETITEM[CASE3 - Getting Item; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule)" time="0.098" classname="junit.ReviewsModule"/>
  <testcase name="GETREVIEW[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on GETREVIEW[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule)" time="0.099" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on GETREVIEW[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on SUBMITREVIEW[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule)" time="0.099" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on SUBMITREVIEW[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on GETITEM[CASE4 - Getting Item; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule)" time="0.124" classname="junit.ReviewsModule"/>
  <testcase name="GETREVIEW[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,] on GETREVIEW[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule)" time="0.145" classname="junit.ReviewsModule"/>
  <testcase name="SUBMITREVIEW[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,] on SUBMITREVIEW[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule)" time="0.146" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,] on SUBMITREVIEW[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,] on GETITEM[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule)" time="0.147" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,] on GETITEM[CASE5 - Getting Reviews; ID valid | Expected: TRUE | Parameters: 1,,](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,] on GETREVIEW[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule)" time="0.17" classname="junit.ReviewsModule"/>
  <testcase name="SUBMITREVIEW[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,] on SUBMITREVIEW[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule)" time="0.17" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,] on SUBMITREVIEW[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,] on GETITEM[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule)" time="0.171" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,] on GETITEM[CASE6 - Getting Reviews; ID empty | Expected: FALSE | Parameters: ,,](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on GETREVIEW[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule)" time="0.197" classname="junit.ReviewsModule"/>
  <testcase name="SUBMITREVIEW[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on SUBMITREVIEW[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule)" time="0.197" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on SUBMITREVIEW[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on GETITEM[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule)" time="0.198" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,] on GETITEM[CASE7 - Getting Reviews; ID doesn’t exist | Expected: FALSE | Parameters: 777,,](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,] on GETREVIEW[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule)" time="0.221" classname="junit.ReviewsModule"/>
  <testcase name="SUBMITREVIEW[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,] on SUBMITREVIEW[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule)" time="0.222" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,] on SUBMITREVIEW[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,] on GETITEM[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule)" time="0.223" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,] on GETITEM[CASE8 - Getting Reviews; ID non-numeric | Expected: FALSE | Parameters: abc,,](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on GETREVIEW[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule)" time="0.245" classname="junit.ReviewsModule"/>
  <testcase name="SUBMITREVIEW[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on SUBMITREVIEW[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule)" time="0.246" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- SUBMITREVIEW[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on SUBMITREVIEW[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule) -->
  <testcase name="GETITEM[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on GETITEM[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule)" time="0.246" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,] on GETITEM[CASE9 - Getting Reviews; ID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,,](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good] on GETREVIEW[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good](junit.ReviewsModule)" time="0.247" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good] on GETREVIEW[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good] on SUBMITREVIEW[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good](junit.ReviewsModule)" time="0.292" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good] on GETITEM[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good](junit.ReviewsModule)" time="0.292" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good] on GETITEM[CASE10 - Submitting Reviews; valid | Expected: TRUE | Parameters: 1,1,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good] on GETREVIEW[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good](junit.ReviewsModule)" time="0.293" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good] on GETREVIEW[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good] on SUBMITREVIEW[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good](junit.ReviewsModule)" time="0.315" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good] on GETITEM[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good](junit.ReviewsModule)" time="0.315" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good] on GETITEM[CASE11 - Submitting Reviews; itemID empty | Expected: FALSE | Parameters: ,1,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good] on GETREVIEW[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good](junit.ReviewsModule)" time="0.316" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good] on GETREVIEW[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good] on SUBMITREVIEW[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good](junit.ReviewsModule)" time="0.338" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good] on GETITEM[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good](junit.ReviewsModule)" time="0.339" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good] on GETITEM[CASE12 - Submitting Reviews; itemID doesn’t exist | Expected: FALSE | Parameters: 777,1,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good] on GETREVIEW[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good](junit.ReviewsModule)" time="0.339" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good] on GETREVIEW[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good] on SUBMITREVIEW[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good](junit.ReviewsModule)" time="0.362" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good] on GETITEM[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good](junit.ReviewsModule)" time="0.362" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good] on GETITEM[CASE13 - Submitting Reviews; itemID non-numeric | Expected: FALSE | Parameters: abc,1,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good] on GETREVIEW[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good](junit.ReviewsModule)" time="0.363" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good] on GETREVIEW[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good] on SUBMITREVIEW[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good](junit.ReviewsModule)" time="0.386" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good] on GETITEM[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good](junit.ReviewsModule)" time="0.386" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good] on GETITEM[CASE14 - Submitting Reviews; itemID too long | Expected: FALSE | Parameters: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,1,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good] on GETREVIEW[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good](junit.ReviewsModule)" time="0.387" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good] on GETREVIEW[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good] on SUBMITREVIEW[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good](junit.ReviewsModule)" time="0.409" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good] on GETITEM[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good](junit.ReviewsModule)" time="0.409" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good] on GETITEM[CASE15 - Submitting Reviews; userID empty | Expected: FALSE | Parameters: 1,,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good] on GETREVIEW[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good](junit.ReviewsModule)" time="0.41" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good] on GETREVIEW[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good] on SUBMITREVIEW[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good](junit.ReviewsModule)" time="0.433" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good] on GETITEM[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good](junit.ReviewsModule)" time="0.433" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good] on GETITEM[CASE16 - Submitting Reviews; userID doesn’t exist | Expected: FALSE | Parameters: 1,777,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good] on GETREVIEW[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good](junit.ReviewsModule)" time="0.434" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good] on GETREVIEW[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good] on SUBMITREVIEW[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good](junit.ReviewsModule)" time="0.455" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good] on GETITEM[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good](junit.ReviewsModule)" time="0.456" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good] on GETITEM[CASE17 - Submitting Reviews; userID non-numeric | Expected: FALSE | Parameters: 1,abc,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good] on GETREVIEW[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good](junit.ReviewsModule)" time="0.456" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good] on GETREVIEW[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good] on SUBMITREVIEW[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good](junit.ReviewsModule)" time="0.479" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good] on GETITEM[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good](junit.ReviewsModule)" time="0.479" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good] on GETITEM[CASE18 - Submitting Reviews; userID too long | Expected: FALSE | Parameters: 1,111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,very good](junit.ReviewsModule) -->
  <testcase name="GETREVIEW[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good] on GETREVIEW[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good](junit.ReviewsModule)" time="0.48" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETREVIEW[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good] on GETREVIEW[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good](junit.ReviewsModule) -->
  <testcase name="SUBMITREVIEW[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good] on SUBMITREVIEW[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good](junit.ReviewsModule)" time="0.505" classname="junit.ReviewsModule"/>
  <testcase name="GETITEM[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good] on GETITEM[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good](junit.ReviewsModule)" time="0.504" classname="junit.ReviewsModule">
    <skipped/>
  </testcase> <!-- GETITEM[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good] on GETITEM[CASE19 - Submitting Reviews; text too long | Expected: FALSE | Parameters: 1,1,very goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery goodvery good](junit.ReviewsModule) -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.007" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on registerQueryTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.03" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.03" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.031" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.031" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest)" time="0.032" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Exists | Expected: TRUE | Params: mike,,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.037" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on registerQueryTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.063" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.064" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.064" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.065" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Doesn&#039;t Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest)" time="0.065" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Doesn't Exist | Expected: FALSE | Params: mike9001,,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.066" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on loginQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on registerQueryTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.088" classname="junit.UsersTest"/>
  <testcase name="updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.087" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on updateUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.088" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on createUserTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.088" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on getDetailsTest[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest)" time="0.089" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,] on invalid[CASEregisterQuery | Method: Username Too Long | Expected: FALSE | Params: aaaaaaaaaaaaaaaaaaaaa,,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.089" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.09" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.091" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.118" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.118" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.119" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Valid credentials; user created | Expected: 1 | Params: mike2,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.119" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.12" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.121" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.145" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.145" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.146" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Username too long | Expected: 0 | Params: aaaaaaaaaaaaaaaaaaaaa,mike,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.147" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.147" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.148" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.174" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.174" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.175" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Password too long | Expected: 0 | Params: mike4,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,m,23 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.175" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.176" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.176" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.199" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.198" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.199" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Firstname too long | Expected: 0 | Params: mike5,mike,aaaaaaaaaaaaaaaaaaaaa,Mike,m,24 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.199" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.199" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.2" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.222" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.223" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.224" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Lastname too long | Expected: 0 | Params: mike6,mike,Mike,aaaaaaaaaaaaaaaaaaaaa,m,25 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.224" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.224" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.225" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.251" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.251" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest)" time="0.252" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Gender more than 1 char | Expected: 0 | Params: mike7,mike,Mike,Mike,mm,26 Mars Place,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.251" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.252" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.252" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.278" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.279" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest)" time="0.279" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,] on invalid[CASEcreateUser | Method: Address too long | Expected: 0 | Params: mike8,mike,Mike,Mike,m,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.279" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on loginQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.28" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on registerQueryTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.28" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on updateUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on createUserTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.305" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.305" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on getDetailsTest[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest)" time="0.306" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,] on invalid[CASEcreateUser | Method: Phone non-numeric | Expected: 0 | Params: mike9,mike,Mike,Mike,m,23 Mars Place,abcdefghij,mike@mike.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.306" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on loginQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.306" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on registerQueryTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.307" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on updateUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on createUserTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.331" classname="junit.UsersTest"/>
  <testcase name="getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.331" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on getDetailsTest[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest)" time="0.332" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,] on invalid[CASEcreateUser | Method: Email too long | Expected: 0 | Params: mike10,mike,Mike,Mike,m,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.353" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.354" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.354" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.355" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.355" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest)" time="0.356" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,] on invalid[CASEloginQuery | Method: Valid Normal Login Creds | Expected: 3 | Params: mike,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.378" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.379" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.379" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.38" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.38" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest)" time="0.381" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,] on invalid[CASEloginQuery | Method: Invalid username | Expected: null | Params: abcd1234,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="0.407" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="0.407" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="0.407" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="0.407" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="0.408" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest)" time="0.408" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,] on invalid[CASEloginQuery | Method: Invalid password | Expected: null | Params: mike,abcd1234,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="0.43" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="0.43" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="0.431" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="0.431" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="0.432" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest)" time="0.432" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,] on invalid[CASEloginQuery | Method: Invalid username (too long) | Expected: null | Params: abcdefghijklmnopqrstuvwxyz,mike,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on loginQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="0.454" classname="junit.UsersTest"/>
  <testcase name="registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="0.454" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on registerQueryTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="0.455" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on updateUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="0.455" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on createUserTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="0.455" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on getDetailsTest[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest)" time="0.456" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,] on invalid[CASEloginQuery | Method: Invalid password (too long) | Expected: null | Params: mike,abcdefghijklmnopqrstuvwxyz,,,,,,,](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="0.456" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on loginQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="0.457" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on registerQueryTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="0.457" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on updateUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="0.457" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on createUserTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on getDetailsTest[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="0.479" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest)" time="0.479" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3] on invalid[CASEgetDetails | Method: Valid ID | Expected: mike | Params: ,,,,,,,,3](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="0.48" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on loginQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="0.48" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on registerQueryTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="0.481" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on updateUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="0.482" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on createUserTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on getDetailsTest[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="0.507" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest)" time="0.507" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000] on invalid[CASEgetDetails | Method: Invalid ID | Expected: null | Params: ,,,,,,,,4000](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="0.508" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on loginQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="0.508" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on registerQueryTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="0.509" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on updateUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="0.509" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on createUserTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on getDetailsTest[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="0.531" classname="junit.UsersTest"/>
  <testcase name="invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest)" time="0.531" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc] on invalid[CASEgetDetails | Method: ID contains non-numeric chars | Expected: null | Params: ,,,,,,,,abc](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.532" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.534" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.595" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.595" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.595" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.596" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Valid credentials; user updated | Expected: 1 | Params: ,test,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.596" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.597" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.64" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.641" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.641" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.642" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Password too long | Expected: 0 | Params: ,aaaaaaaaaaaaaaaaaaaaa,Mike,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.642" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.643" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.689" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.689" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.69" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.69" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Firstname too long | Expected: 0 | Params: ,test,aaaaaaaaaaaaaaaaaaaaa,Mike,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.691" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.691" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.738" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.739" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.739" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.74" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Lastname too long | Expected: 0 | Params: ,test,Mike,aaaaaaaaaaaaaaaaaaaaa,,23 Mars Place,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.739" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.74" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.786" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.786" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.786" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest)" time="0.787" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2] on invalid[CASEupdateUser | Method: Address too long | Expected: 0 | Params: ,test,Mike,Mike,,aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,1234567890,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="0.787" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on loginQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="0.788" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on registerQueryTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on updateUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="0.835" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="0.835" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on createUserTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="0.836" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on getDetailsTest[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest)" time="0.836" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2] on invalid[CASEupdateUser | Method: Phone non-numeric | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,abcdefghij,mike@mike.com,2](junit.UsersTest) -->
  <testcase name="loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="0.837" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on loginQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="0.837" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on registerQueryTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="updateUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on updateUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="0.913" classname="junit.UsersTest"/>
  <testcase name="createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="0.915" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on createUserTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="0.916" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on getDetailsTest[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
  <testcase name="invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest)" time="0.917" classname="junit.UsersTest">
    <skipped/>
  </testcase> <!-- invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2] on invalid[CASEupdateUser | Method: Email too long | Expected: 0 | Params: ,test,Mike,Mike,,23 Mars Place,23 Mars Place,aaaaaaaaaaaaaaaaaaaaa@aaaaaaaaaaaaaaaaaaaaa.com,2](junit.UsersTest) -->
</testsuite> <!-- UsersTest -->
